* a project to practice sql, seqeulize, express, react, redux

* number-go-up outline

  a page with a number and a button to make that number go up

  uses postgres in local development to maximize deployment ease

  does not do any authentication or csrf

* steps to make the number-go-up project

** make this readme

  #+begin_src bash
    touch readme.org
    # add content to readme.org
    git add readme.org
    git commit -m "init repo"
  #+end_src

  put the following in =.prettierrc=
#+begin_src json
  {
    "printWidth": 70
  }
#+end_src

  #+begin_src bash
    git add .prettierrc
    git commit -m "add .prettierrc"
  #+end_src

** make backend
  #+begin_src bash
    mkdir backend
    cd backend
    npm init -y
    wget -O .gitignore \
        https://raw.githubusercontent.com/github/gitignore/refs/heads/main/Node.gitignore
    git add .gitignore
    git commit -m "add template gitignore for node projects"
    npm install \
        dotenv \
        express \
        per-env \
        sequelize \
        pg
    npm install --save-dev \
        nodemon \
        sequelize-cli \
        dotenv-cli
    git add package.json
    git add package-lock.json
    git commit -m "add initial npm packages, lock their versions"
  #+end_src

  put the following in =backend/env.example=
  #+begin_src bash
    PORT=8000
    SCHEMA="number_go_up"
    DEVELOPMENT_SCHEMA="number_go_up_development"
  #+end_src

  put the following in =backend/config/index.js=
  #+begin_src js
    module.exports = {
      environment: process.env.NODE_ENV || "development",
      port: process.env.PORT || 8000,
    };
  #+end_src

  this creates a configuration data structure configuring the backend's
  environment, and port.

  put the following in =backend/.sequelizerc=
  #+begin_src js
    const path = require('path');

    module.exports = {
      config: path.resolve('config', 'database.js'),
      'models-path': path.resolve('db', 'models'),
      'seeders-path': path.resolve('db', 'seeders'),
      'migrations-path': path.resolve('db', 'migrations')
    };
  #+end_src

  to tell sequelize to use =backend/config/database.js= for
  configuration.

  #+begin_src bash
    # in backend/
    git add ".sequelizerc"
    git commit -m "configure sequelize"
  #+end_src

  then run sequelize to generate some skeleton files.  modify the
  skeletons, add and commit them.

  #+begin_src bash
    # in backend/
    npx sequelize init
  #+end_src

  this creates =backend/config/database.js= with content we want to
  change to the following,
  #+begin_src js
    const config = require("./index");

    module.exports = {
      production: {
        use_env_variable: "DATABASE_URL",
        dialect: "postgres",
        seederStorage: "sequelize",
        dialectOptions: {
          ssl: {
            require: true,
            rejectUnauthorized: false,
          },
        },
        define: {
          schema: process.env.SCHEMA,
        },
      },
      development: {
        dialect: "postgres",
        seederStorage: "sequelize",
        benchmark: true,
        logQueryParameters: true,
        typeValidation: true,
        define: {
          schema: process.env.DEVELOPMENT_SCHEMA,
        },
      },
    };
  #+end_src

  then add and commit those changes to the sequelize configuration
  #+begin_src bash
    git add backend/conig/database.js
    git commit -m "use development schema during development"
  #+end_src

  put the following in =backend/psql-setup-script.js=
  #+begin_src js
    const { sequelize } = require('./db/models');

    sequelize.showAllSchemas({ logging: false }).then(async (data) => {
      if (!data.includes(process.env.SCHEMA)) {
        await sequelize.createSchema(process.env.SCHEMA);
      }
    });
  #+end_src
