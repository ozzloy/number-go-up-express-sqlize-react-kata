* a project to practice sql, seqeulize, express, react, redux

* number-go-up outline

  a page with a number and a button to make that number go up

  uses postgres in local development to maximize deployment ease

  does not do any authentication or csrf

* steps to make the number-go-up project

** make this readme

  #+begin_src bash
    touch readme.org
    # add content to readme.org
    git add readme.org
    git commit -m "init repo"
  #+end_src

  put the following in =.prettierrc=
#+begin_src json
  {
    "printWidth": 70
  }
#+end_src

  #+begin_src bash
    git add .prettierrc
    git commit -m "add .prettierrc"
  #+end_src

** make backend

*** create directory, install npm packages
  #+begin_src bash
    mkdir backend
    cd backend
    npm init -y
    wget -O .gitignore \
        https://raw.githubusercontent.com/github/gitignore/refs/heads/main/Node.gitignore
    git add .gitignore
    git commit -m "add template gitignore for node projects"
    npm install \
        dotenv \
        express \
        per-env \
        sequelize \
        pg
    npm install --save-dev \
        nodemon \
        sequelize-cli \
        dotenv-cli
    git add package.json
    git add package-lock.json
    git commit -m "add initial npm packages, lock their versions"
  #+end_src

*** in postgres, create user, db, grant user permissions

in ubuntu use sudo to run the =psql= command as the user =postgres=,
#+begin_src bash
  sudo -U postgres psql
#+end_src

once in the psql shell, create the database user, and the database
#+begin_src sql
  CREATE USER number_go_up WITH PASSWORD 'number_go_up';
  -- successful response: CREATE ROLE

  CREATE DATABASE number_go_up WITH OWNER number_go_up;
  -- successful response: CREATE DATABASE

  ALTER USER number_go_up CREATEDB;
  -- successful response: ALTER ROLE

  GRANT ALL PRIVILEGES ON DATABASE number_go_up TO number_go_up;
  -- successful response: GRANT

  \q
#+end_src

*** configure sequelize for development

  copy =backend/env.example= to =backend/.env=
  #+begin_src bash
    cd backend
    cp env.example .env
  #+end_src

  =backend/.env= should have the following content
  #+begin_src bash
    NODE_ENV="development"
  #+end_src

  copy =backend/env.development.example= to =backend/.env.development=
  #+begin_src bash
    cd backend
    cp env.development.example .env.development
  #+end_src

  =backend/env.development.example= should look like the following
  #+begin_src bash
    NODE_ENV="development"
    PORT=8000

    DB_PROTOCOL="postgres"
    DB_USERNAME="number_go_up"
    DB_PASSWORD="number_go_up"
    DB_HOST="localhost"
    DB_DATABASE="number_go_up"
    DB_PORT=5432
    DB_SCHEMA="number_go_up"
  #+end_src

  =backend/config/index.js= should look like the following
  #+begin_src js
    const {
      NODE_ENV,
      PORT,
      DB_PROTOCOL: dialect,
      DB_USERNAME: username,
      DB_PASSWORD: password,
      DB_HOST: host,
      DB_DATABASE: database,
      DB_PORT: port,
      DB_SCHEMA: schema,
    } = process.env;

    const value = {
      environment: NODE_ENV || "development",
      port: PORT || 8000,
      db: {
        username,
        password,
        database,
        host: host || "localhost",
        port: port || 5432,
        dialect,
        schema,
      },
    };

    module.exports = value;
  #+end_src

  this creates a configuration data structure configuring the backend's
  environment, and port.

  =backend/db/models/index.js= should have the following content
  #+begin_src js
    "use strict";

    const fs = require("fs");
    const path = require("path");
    const Sequelize = require("sequelize");
    const process = require("process");
    const basename = path.basename(__filename);
    const env = process.env.NODE_ENV || "development";
    const config = require(__dirname + "/../../config/database.js")[env];
    const db = {};

    let sequelize;
    if (config.use_env_variable) {
      sequelize = new Sequelize(
        process.env[config.use_env_variable],
        config
      );
    } else {
      sequelize = new Sequelize(
        config.database,
        config.username,
        config.password,
        config
      );
    }

    fs.readdirSync(__dirname)
      .filter((file) => {
        return (
          file.indexOf(".") !== 0 &&
          file !== basename &&
          file.slice(-3) === ".js" &&
          file.indexOf(".test.js") === -1
        );
      })
      .forEach((file) => {
        const model = require(path.join(__dirname, file))(
          sequelize,
          Sequelize.DataTypes
        );
        db[model.name] = model;
      });

    Object.keys(db).forEach((modelName) => {
      if (db[modelName].associate) {
        db[modelName].associate(db);
      }
    });

    db.sequelize = sequelize;
    db.Sequelize = Sequelize;

    module.exports = db;
  #+end_src

  =backend/.sequelizerc= should look like the following
  #+begin_src js
    const path = require('path');

    module.exports = {
      config: path.resolve('config', 'database.js'),
      'models-path': path.resolve('db', 'models'),
      'seeders-path': path.resolve('db', 'seeders'),
      'migrations-path': path.resolve('db', 'migrations')
    };
  #+end_src

  to tell sequelize to use =backend/config/database.js= for
  configuration.

  #+begin_src bash
    git add "backend/.sequelizerc"
    git commit -m "configure sequelize"
  #+end_src

  then run sequelize to generate some skeleton files.  modify the
  skeletons, add and commit them.

  #+begin_src bash
    cd backend
    npx sequelize init
  #+end_src

  this creates =backend/config/database.js= with content we want to
  change to the following,
  #+begin_src js
    const config = require("./index");

    const value = {
      development: {
        ...config.db,
        seederStorage: "sequelize",
        logQueryParameters: true,
        typeValidation: true,
        define: {
          schema: config.db.schema,
        },
      },
      production: {
        ...config.db,
        seederStorage: "sequelize",
        dialectOptions: {
          ssl: {
            require: true,
            rejectUnauthorized: false,
          },
        },
        define: {
          schema: config.db.schema,
        },
      },
    };

    module.exports = value;
  #+end_src

  then add and commit those changes to the sequelize configuration
  #+begin_src bash
    git add backend/conig/database.js
    git commit -m "use development schema during development"
  #+end_src

  put the following in =backend/psql-setup-script.js=
  #+begin_src js
    const { sequelize } = require("./db/models");

    sequelize.showAllSchemas({ logging: false }).then(async (data) => {
      if (!data.includes(process.env.DB_SCHEMA)) {
        await sequelize.createSchema(process.env.DB_SCHEMA);
      }
    });
  #+end_src

  =backend/package.json= should get some new scripts
  #+begin_src js
    {
      "name": "number-go-up-backend",
      "version": "1.0.0",
      "description": "maintain a db with a number that goes up",
      "main": "index.js",
      "scripts": {
        "init-db": "dotenv -e .env.development -- node psql-setup-script.js ",
        "start": "dotenv per-env",
        "start:development": "dotenv -e .env.development -- nodemon app.js",
        "start:production": "dotenv -e .env.production -- nodemon app.js",
        "test": "npm test"
      },
      "author": "",
      "license": "AGPL-3.0-or-later",
      "dependencies": {
        "dotenv": "^16.4.7",
        "express": "^4.21.2",
        "per-env": "^1.0.2",
        "pg": "^8.13.1",
        "sequelize": "^6.37.5"
      },
      "devDependencies": {
        "dotenv-cli": "^7.4.4",
        "nodemon": "^3.1.7",
        "sequelize-cli": "^6.6.2"
      }
    }
  #+end_src

  create the postgres database schema
  #+begin_src bash
    npm run init-db
  #+end_src
